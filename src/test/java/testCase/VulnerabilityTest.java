package testCase;

import io.qameta.allure.Attachment;
import io.qameta.allure.Description;
import io.qameta.allure.Feature;
import io.qameta.allure.Step;
import org.json.JSONObject;
import org.junit.jupiter.api.*;
import util.Request;
import util.ResponseInformation;

import static util.ApiOwaspConfig.*;
import static util.EnvConfig.HOST;

@TestClassOrder(value = ClassOrderer.OrderAnnotation.class)
public class VulnerabilityTest {
    Request request = new Request();
    ResponseInformation res = new ResponseInformation();
    String idScanner;

    @DisplayName("Verify the scanner of owasp zap")
    @Description("this test case is to verify .......")
    @Feature("Order")
    @Test
    @Order(value = 3)
    public void vulnerabilityOwaspZapTest() throws InterruptedException {
        this.startSpiderInZAP();
        this.startScanningInZAP();
        this.monitoringTheProgressScanner();
    }

    @Step("Select the Host and Start Spider")
    public void startSpiderInZAP() {
        res = request.sendGetRequest(String.format(START_SPIDER, HOST));
        JSONObject response = new JSONObject(res.getBody());
    }

    @Step("Select the Host and Start Scanning")
    public void startScanningInZAP() {
        res = request.sendGetRequest(String.format(START_SCANNING, HOST));
        JSONObject response = new JSONObject(res.getBody());
        idScanner = response.getString("scan").toString();
    }

    @Step("Monitoring the scanning 100%")
    public void monitoringTheProgressScanner() throws InterruptedException {
        String status = "0";
        do {

            res = request.sendGetRequest(String.format(PROGRESS, idScanner));
            JSONObject response = new JSONObject(res.getBody());
            status = response.get("status").toString();
            System.out.println("INFO> status: [" + status + "%]");
            Thread.sleep(10000);
        } while (!status.equals("100"));
    }

    @AfterEach
    public void after() {
        res = request.sendGetRequest(String.format(GET_LIST_VULNERABILITY, idScanner));
        this.attachment("Vulnerability List", res.getBody());
        res = request.sendGetRequest(GET_REPORT);
        this.attachment("OWASP ZAP Report", res.getBody());
    }

    @Attachment(value = "{0}", type = "text/html")
    public String attachment(String name, String content) {
        return content;
    }

}
